---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-register-script
  namespace: gourmetgram-platform
data:
  register_model.py: |
    import mlflow
    import torch

    mlflow.set_tracking_uri("http://mlflow:8000")
    client = mlflow.tracking.MlflowClient()
    model_name = "gourmetgram-food11"

    try:
        client.get_registered_model(model_name)
        print(f"Model {model_name} already registered. Skipping registration.")
    except mlflow.exceptions.RestException:
        print(f"Model {model_name} not found. Registering...")

        model = torch.load("/tmp/food11.pth", map_location=torch.device("cpu"), weights_only=False)

        with mlflow.start_run(run_name="register-food11") as run:
            mlflow.pytorch.log_model(model, artifact_path="food11_model")
            result = mlflow.register_model(f"runs:/{run.info.run_id}/food11_model", model_name)

        version = result.version

        for alias in ["staging", "canary", "production"]:
            client.set_registered_model_alias(
                name=model_name,
                alias=alias,
                version=version
            )
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mlflow-register-model
  namespace: gourmetgram-platform
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 2
  template:
    spec:
      containers:
        - name: register-model
          image: python:3.10-slim
          volumeMounts:
            - name: script-volume
              mountPath: /script
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              pip install mlflow torch requests --extra-index-url https://download.pytorch.org/whl/cpu

              echo "Waiting for MLflow..."
              until curl -s http://mlflow:8000/health | grep "OK"; do
                sleep 5
              done

              curl -L -o /tmp/food11.pth https://github.com/teaching-on-testbeds/gourmetgram/raw/refs/heads/master/food11.pth

              python3 /script/register_model.py
      volumes:
        - name: script-volume
          configMap:
            name: mlflow-register-script
      restartPolicy: OnFailure
