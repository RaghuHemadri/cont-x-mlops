---
apiVersion: v1
kind: Namespace
metadata:
  name: gourmetgram-platform

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: gourmetgram-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: gourmetgram-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: gourmetgram-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio
          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 9000
            - containerPort: 9001
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: accesskey
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: secretkey
          volumeMounts:
            - name: minio-storage
              mountPath: /data
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: gourmetgram-platform
spec:
  selector:
    app: minio
  ports:
    - name: api
      port: 9000
      targetPort: 9000
    - name: console
      port: 9001
      targetPort: 9001
  externalIPs:
    - {{ .Values.minio.externalIP }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-create-bucket
  namespace: gourmetgram-platform
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 60
  template:
    spec:
      containers:
        - name: mc
          image: minio/mc
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: secretkey
          command: ["/bin/sh", "-c"]
          args:
            - |
              until mc alias set minio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY; do
                echo "Waiting for MinIO...";
                sleep 5;
              done
              if ! mc ls minio/mlflow-artifacts; then
                mc mb minio/mlflow-artifacts;
              else
                echo "Bucket already exists.";
              fi
      restartPolicy: OnFailure

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: gourmetgram-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              value: "user"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "mlflowdb"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: gourmetgram-platform
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: gourmetgram-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlflow
  template:
    metadata:
      labels:
        app: mlflow
    spec:
      containers:
        - name: mlflow
          image: ghcr.io/mlflow/mlflow:v2.20.2
          ports:
            - containerPort: 8000
          env:
            - name: MLFLOW_TRACKING_URI
              value: http://0.0.0.0:8000
            - name: MLFLOW_S3_ENDPOINT_URL
              value: http://minio:9000
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: accesskey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-credentials
                  key: secretkey

          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install psycopg2-binary boto3 &&
              mlflow server --backend-store-uri postgresql://user:password@postgres/mlflowdb \
              --artifacts-destination s3://mlflow-artifacts/ --serve-artifacts --host 0.0.0.0 --port 8000

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow
  namespace: gourmetgram-platform
spec:
  selector:
    app: mlflow
  ports:
    - port: 8000
      targetPort: 8000
  externalIPs:
    - {{ .Values.mlflow.externalIP }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: mlflow-register-model
  namespace: gourmetgram-platform
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 2
  template:
    spec:
      containers:
        - name: register-model
          image: python:3.10-slim
          command: ["/bin/sh", "-c"]
          args:
            - |
              pip install mlflow torch requests --extra-index-url https://download.pytorch.org/whl/cpu

              echo "Waiting for MLflow to be ready..."
              until curl -s http://mlflow:8000/health | grep "OK"; do
                sleep 5
              done

              echo "Downloading model..."
              curl -L -o /tmp/food11.pth https://github.com/teaching-on-testbeds/gourmetgram/raw/refs/heads/master/food11.pth

              python3 - <<EOF
import mlflow
import torch

mlflow.set_tracking_uri("http://mlflow:8000")
client = mlflow.tracking.MlflowClient()
model_name = "gourmetgram-food11"

try:
    client.get_registered_model(model_name)
    print(f"Model {model_name} already registered. Skipping registration.")
except mlflow.exceptions.RestException:
    print(f"Model {model_name} not found. Registering...")

    model = torch.load("/tmp/food11.pth", map_location=torch.device("cpu"), weights_only=False)

    with mlflow.start_run(run_name="register-food11") as run:
        mlflow.pytorch.log_model(model, artifact_path="food11_model")
        result = mlflow.register_model(f"runs:/{run.info.run_id}/food11_model", model_name)

    version = result.version

    for alias in ["staging", "canary", "production"]:
        client.set_registered_model_alias(
            name=model_name,
            alias=alias,
            version=version
        )
EOF
      restartPolicy: OnFailure

